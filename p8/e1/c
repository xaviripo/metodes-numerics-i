#!/usr/bin/env python
from optparse import OptionParser
import os

### Parser options
parser = OptionParser()
parser.add_option("-s", "--std",                dest="std",             help="use STD as standard",                     metavar="STD")
parser.add_option("-v", "--verbose",            dest="verbose",         help="print status messages to stdout",         metavar="VERBOSE",      action="store_true",  default=True)
parser.add_option("-q", "--quiet",              dest="quiet",           help="don't print status messages to stdout",   metavar="QUIET",        action="store_true",  default=False)
parser.add_option("-c", "--compile",            dest="compile",         help="compile the sources",                     metavar="COMPILE",      action="store_true",  default=True)
parser.add_option("-C", "--compile-only",       dest="compile_only",    help="compile only; don't link nor execute",    metavar="COMPILE-ONLY", action="store_true",  default=False)
parser.add_option("-l", "--link",               dest="link",            help="link object files and libraries",         metavar="LINK",         action="store_true",  default=True)
parser.add_option("-L", "--link-only",          dest="link_only",       help="link only; don't compile nor execute",    metavar="LINK-ONLY",    action="store_true",  default=False)
parser.add_option("-x", "--execute",            dest="execute",         help="execute resulting program",               metavar="EXECUTE",      action="store_true",  default=False)
parser.add_option("-X", "--execute-only",       dest="execute_only",    help="execute only; don't compile nor link",    metavar="EXECUTE-ONLY", action="store_true",  default=False)

### Parser vars
(options, args) = parser.parse_args()
verbose = options.verbose
quiet = options.quiet

### Program vars
standards = {"ansi": "-ansi", "c11": "-std=c11"} # <entered standard>: <argument for gcc>
standard_default = "ansi" # Default standard if no -s option

### COMPILE, LINK and EXECUTE
(compile, link, execute) = (options.compile, options.link, options.execute)

if options.compile_only:
    (compile, link, execute) = (True, False, False)
elif options.link_only:
    (compile, link, execute) = (False, True, False)
elif options.execute_only:
    (compile, link, execute) = (False, False, True)

### STD
try:
    std = options.std.lower()
except Exception as e:
    std = standard_default

if std in standards:
    std = standards[std]
else:
    raise Exception("Invalid standard argument: \"" + std + "\"")

### FILE
try:
    substr = args[0][:-2]
    file = substr if substr == ".c" else args[0]
except Exception as e:
    raise Exception("Missing mandatory argument FILE")

### Actual program
if compile:
    os.system("gcc -c" +
              " " + std +
              (" -Wall" if verbose else "") +
              (" -w" if quiet else "") +
              " " + file + ".c")
if link:
    os.system("gcc -o " + file + " " + file + ".o -lm")
if execute:
    os.system("./" + file)
